
@model  Model.ViewModels.SundryImage.VmSundryImage
@using Model.ApplicationDomainModels;
@using Model.ToolsModels.DropDownList

@{
    ViewBag.Title = "Edit package sundry image";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}


<link href="~/Resources/CSS/preview-image.css" rel="stylesheet" />

<link href="~/Resources/Controls/summernote-0.8.16-dist/summernote-bs4.css" rel="stylesheet" />
<script src="~/Resources/Controls/summernote-0.8.16-dist/summernotenew.js"></script>
<link href="~/Resources/Controls/Tree/tree.css" rel="stylesheet" />
@using (Html.BeginForm("epsi", "SundryImage", FormMethod.Post,
    new { @class = "form-horizontal", id = "_SundryImageEdit_Form", enctype = "multipart/form-data" }))
{
    <div class="container-fluid">
        @Html.AntiForgeryToken()

        @*@Html.ValidationSummary("", new { @class = "text-danger" })*@

        <div class="row">
            <div class="col-sm-2">

                @{ var imageType = (int)Model.Type;}
                <input type="hidden" name="Type" value="@imageType" />

                <div id="packageItemTypeDiv" class="form-group">
                    @Html.Label(@Model["Showcase Item Type"], new { @class = "font-weight-bold control-label" })
                    <div class="col-sm-12">
                        @Html.Partial("_DropDownList", new VmDropDownList
                   {
                       HtmlElementId = "PackageItemType",
                       DataController = "SundryImage",
                       DataAction = "gtmt",
                       OptionLabel = "",
                       ActiveItemValue = ((int)Model.PackageItemType).ToString(),
                       OnItemSelected = "sundryPackageItemTypeDropDownList_OnClientSelectedItem"

                   })
                        @Html.ValidationMessageFor(model => model.PackageItemType, "", new { @class = "text-danger" })
                        <script>
                            function sundryPackageItemTypeDropDownList_OnClientSelectedItem(id) {
                                if (id == @((int)ConstantObjects.PackageItemType.Category))
                                {
                                    $("#btnShowCategoryTree").val('@Model.PackageItemTitle');
                                    $('#showCategoryDiv').show();
                                }
                                else
                                {
                                    $('#showCategoryDiv').hide();
                                }
                            }
                        </script>
                        <div class="form-group" id="showCategoryDiv">
                            <div>
                                <input type="button" id="btnShowCategoryTree" class="btn btn-outline-success mt-2"
                                       value="@Model["Select Category"]" title="@Model["Select Category"]" onclick="showCategoryModal();" />

                            </div> 
                            <div>
                                @Html.CheckBox("ShowInMenu",
                                          htmlAttributes: new { @id = "ShowInMenu" })
                                <label for="ShowInMenu"> @Model["Show In Menu"]</label>

                            </div>
                        </div>
                        <div class="modal fade modal-fullscreen" id="categoryModal" tabindex="-1" role="dialog" data-keyboard="false">
                            <div class="modal-dialog">
                                <div class="modal-content">

                                    <!-- Modal Header -->
                                    <div class="modal-header">
                                        <h4 class="modal-title">@Model["Select Category"]</h4>
                                        <button type="button" class="close m-1"
                                                data-dismiss="modal" onclick="restoreOldIconUrl()">
                                            &times;
                                        </button>
                                    </div>

                                    <!-- Modal body -->
                                    <div class="modal-body">
                                        <div id="categoryTree" class="scrollable"></div>
                                    </div>

                                    <!-- Modal footer -->
                                    <div class="modal-footer">

                                    </div>
                                </div>
                            </div>
                        </div>
                        <script src="~/Resources/Controls/Tree/tree.js"></script>
                        <script>
                            function showCategoryModal() {
                                $("#categoryModal").modal('show');
                            }
                            var parameterObject = {
                                parentId: -1,
                                routeAddress: '/tree/lct',
                                expandedLevel: 0,
                                containerId: 'categoryTree',

                                addCallback: '',
                                editCallback: '',
                                deleteCallback: '',
                                selectNodeCallback: 'selectNode',

                                addButtonShow: false,
                                editButtonShow: false,
                                deleteButtonShow: false,

                                readOnly: true,
                                showAdditionalDataInLeaf: false,
                                additionalDataRenderCallback: "",

                                loadedCallback: loadedTree,

                            };

                            loadTree(parameterObject);

                            function selectNode(id) {
                                var node = $('[data-id="' + id + '"]');
                                $("#ObjectIdHidden").val(id);
                                $("#btnShowCategoryTree").val(node.text().trim());
                                $("#categoryModal").modal('hide');
                            }
                              function loadedTree() {
                                @if (string.IsNullOrWhiteSpace(Model.LoadedCategoryIds) == false)
                                {
                                    foreach (var cId in Model.LoadedCategoryIds.Split(new char[] {','},StringSplitOptions.RemoveEmptyEntries))
                                    {
                                        @Html.Raw("$('#treeChildNode_" + cId + " > a > span.tree-parent-node-sign').click();");

                                    }

                                    if (Model.ObjectId != 0 ) {
                                      @Html.Raw("selectNode("+ Model.ObjectId + ");")
                                      @Html.Raw("\nselectCurrentNode($('[data-id=\"" + Model.ObjectId + "\"]'));")
                                    }
                                }
                            }
                        </script>
                    </div>

                </div>

                <div class="form-group">
                    @Html.Label(@Model["Priority"], new { @class = "font-weight-bold control-label" })
                    <div class="col-sm-12">
                        <input class="form-control valid" data-val="true"
                               data-val-number="@Model["The field Priority must be a number."]" data-val-required="@Model["Priority is Required"]"
                               id="Priority" name="Priority" type="number" value="@Model.Priority">

                        @Html.ValidationMessageFor(model => model.Priority, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label(@Model["Link Url"], new { @class = "font-weight-bold control-label" })
                    <div class="col-sm-12">
                        @Html.TextBoxFor(m => m.LinkUrl, new { @class = "form-control" })
                    </div>
                </div>
            </div>

            <div class="col-sm-4">
                <div class="form-group ml-3">
                    <div>
                        <button type="button" onclick="$('#ImageUrl').click()"
                                class="btn btn-outline-success m-1">
                            @Model["Upload Showcase Image"]
                        </button>
                    </div>
                    <div id="imageColumnTypeDiv" class="" style="display:contents;">

                        @Html.RadioButtonFor(model => model.ImageColumnType, ConstantObjects.ImageColumnType.OneColumn,
                                htmlAttributes: new { @id = "OneColumn" })
                        <label for="OneColumn"> @Model["One Column"] |</label>

                        @Html.RadioButtonFor(model => model.ImageColumnType, ConstantObjects.ImageColumnType.TwoColumn,
                                htmlAttributes: new { @id = "TwoColumn" })
                        <label for="TwoColumn"> @Model["Two Column"] |</label>

                        @Html.RadioButtonFor(model => model.ImageColumnType, ConstantObjects.ImageColumnType.ThreeColumn,
                                htmlAttributes: new { @id = "ThreeColumn" })
                        <label for="ThreeColumn"> @Model["Three Column"] </label>

                    </div>
                    <input type="file" id="ImageUrl" name="ImageUrl" style="position:fixed; top: -10000px" class="btn btn-success form-control">

                    <div id="previewImagesZone" class="preview-images-zone col-12 border">
                        <div class="preview-image preview-show-1">
                            <div class="image-zone">
                                <img id="pro-img-1" src="@Model.ImageUrl" class="client-product-images"
                                     style="width:100%"
                                     data-filename="@Model.ImageUrl.Substring(Model.ImageUrl.LastIndexOf('/')+1)" />
                            </div>

                        </div>
                    </div>
                </div>
            </div>

            <div class="col-6">
                <div class="form-group">
                    @Html.Label(@Model["Showcase Image Text"], new { @class = "font-weight-bold control-label" })
                    <div class="col-sm-12">
                        <div id="htmlEditorTitle"></div>
                        @Html.HiddenFor(model => model.Title, htmlAttributes: new { @id = "TitleHidden" })
                    </div>
                </div>
            </div>

        </div>
        <hr />

        <div class="row">
            <div class="col-6">
                <div class="form-group">

                    <button type="button" onclick="$('#bannerImageUrl').click()"
                            class="btn btn-outline-success m-1">
                        @Model["Upload a banner image for the product page"]
                    </button>
                    <input type="file" id="bannerImageUrl" name="bannerImageUrl" style="position:fixed; top: -10000px" class="btn btn-success form-control">

                    <div id="previewBannerImagesZone" class="preview-images-zone col-12 border">
                        <div class="preview-image preview-show-2">
                            <div class="image-zone">
                                <img id="pro-img-2" src="@Model.BannerImageUrl" class="client-product-images"
                                     style="width:100%"
                                     data-filename="@Model.BannerImageUrl.Substring(Model.BannerImageUrl.LastIndexOf('/') + 1)" />
                            </div>

                        </div>
                    </div>
                </div>

            </div>
            <div class="col-6">

                <div class="form-group">
                    @Html.Label(@Model["Product Page Banner Text"], new { @class = "font-weight-bold control-label" })
                    <div class="col-12">
                        <div id="htmlEditorBannerImageTitle"></div>
                        @Html.HiddenFor(model => model.BannerImageTitle, htmlAttributes: new { @id = "bannerImageTitleHidden" })

                    </div>
                </div>
            </div>

        </div>
        <hr />

        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-10">
                <input type="submit" class="btn btn-outline-primary" value="@Model["Save"]" />
                <input type="button" class="btn btn-outline-secondary" value="@Model["Return"]" onclick="window.history.back()" />
            </div>
        </div>

        @Html.HiddenFor(model => model.Id, htmlAttributes: new { @id = "IdHidden" })
        @Html.HiddenFor(model => model.ObjectId, htmlAttributes: new { @id = "ObjectIdHidden" })
        @Html.HiddenFor(model => model.ImageUrl, htmlAttributes: new { @id = "base64ClientImageHidden" })
        @Html.HiddenFor(model => model.BannerImageUrl, htmlAttributes: new { @id = "base64ClientBannerImageHidden" })
    </div>
}

<script>
    function getBase64Image(img) {
        var canvas = document.createElement("canvas");

        canvas.width = img.naturalWidth;
        canvas.height = img.naturalHeight;

        var ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0);
        return canvas.toDataURL("image/png/jpeg");
    }
    var imageBase64 =
    {
        fileName:"",
        base64String:""
    };
    var bannerImageBase64 =
    {
        fileName: "",
        base64String: ""
    };

    $('#_SundryImageEdit_Form').submit(function (e) {

        if ($('#previewImagesZone').html() == '') {
            alert('@Model["Please upload image"]')
            return false;
        }

        $("#base64ClientImageHidden").val(JSON.stringify(imageBase64));
        $("#base64ClientBannerImageHidden").val(JSON.stringify(bannerImageBase64));

        if ($("#base64ClientImageHidden").val() == "") {

            e.preventDefault();

            alert('@Model["Upload one picture atleast"]');

        }
        else {

            $("#TitleHidden").val($("#htmlEditorTitle").summernote('code'));
            $("#bannerImageTitleHidden").val($("#htmlEditorBannerImageTitle").summernote('code'));
            return true;
        }
    });

    $(document).ready(function () {
        if ("@Model.ImageUrl" != "") {
                var imageUrl = $("#pro-img-1").attr('src');
                imageBase64 = {
                    fileName: imageUrl.substring(imageUrl.lastIndexOf('/') + 1),
                    base64String: getBase64Image(document.getElementById("pro-img-1"))
            };
        }

        if ("@Model.BannerImageUrl" != "") {
            var bannerImageUrl = $("#pro-img-2").attr('src');
                bannerImageBase64 = {
                    fileName: bannerImageUrl.substring(bannerImageUrl.lastIndexOf('/') + 1),
                    base64String: getBase64Image(document.getElementById("pro-img-2"))
            };
         }

        $('#ImageUrl').change(function () {
            readImage();
        });

        $('#bannerImageUrl').change(function () {
            readBannerImage();
        });

        $("#htmlEditorBannerImageTitle").summernote({
            height: 150, minHeight: null, maxHeight: null, focus: false,
            toolbar: [
                ['style', ['style']],
                ['font', ['bold', 'italic', 'underline', 'clear', 'superscript', 'subscript']],
                ['fontname', ['fontname']], ['fontsize', ['fontsize']],
                ['color', ['color']],
                ['para', ['ul', 'ol', 'paragraph']],
                ['height', ['height']],
                ['table', ['table']],
                ['insert', ['link', 'picture', 'hr', 'uploadfile']],
                ['view', ['fullscreen', 'codeview']],
                ['help', ['help']]
            ],

            fontNames: ['Segoe UI', 'Arial', 'Arial Black', 'Comic Sans MS', 'Courier New', 'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande', 'Tahoma', 'Times New Roman', 'Verdana'],
        });

        $("#htmlEditorTitle").summernote({
            height: 200, minHeight: null, maxHeight: null, focus: false,
            toolbar: [
                ['style', ['style']],
                ['font', ['bold', 'italic', 'underline', 'clear', 'superscript', 'subscript']],
                ['fontname', ['fontname']], ['fontsize', ['fontsize']],
                ['color', ['color']],
                ['para', ['ul', 'ol', 'paragraph']],
                ['height', ['height']],
                ['table', ['table']],
                ['insert', ['link', 'picture', 'hr', 'uploadfile']],
                ['view', ['fullscreen', 'codeview']],
                ['help', ['help']]
            ],

            fontNames: ['Segoe UI', 'Arial', 'Arial Black', 'Comic Sans MS', 'Courier New', 'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande', 'Tahoma', 'Times New Roman', 'Verdana'],
        });

        $("#htmlEditorTitle").summernote('code', $("#TitleHidden").val());

    });

    function readImage() {
        var files = $('#ImageUrl').get(0).files;
        if (files != undefined && files.length > 0) {

            var output = $("#previewImagesZone");

            $("#previewImagesZone").empty();

            var file = files[0];

            var picReader = new FileReader();

            picReader.name = file.name;

            picReader.onload = function (e) {
                var picFile = e.target;
                var html =
                    '<div class="preview-image preview-show-1">' +
                    '<div class="image-zone"><img id = "pro-img-1" src = "' +
                    picFile.result + '" style="width:100%;" class="client-product-images" data-filename="' +
                    e.target.name + '"/>' +
                    '</div > ' +
                    '</div > ';

                imageBase64 = {
                    fileName: e.target.name,
                    base64String: picFile.result
                };
                output.append(html);


                }
                picReader.readAsDataURL(file);
        }
        else {
            console.log('Browser not support');
        }
    }
    function readBannerImage() {
        var files = $('#bannerImageUrl').get(0).files;
        if (files != undefined && files.length > 0) {

            var output = $("#previewBannerImagesZone");

            $("#previewBannerImagesZone").empty();

            var file = files[0];

            var picReader = new FileReader();

            picReader.name = file.name;

            picReader.onload = function (e) {
                var picFile = e.target;
                var html =
                    '<div class="preview-image preview-show-2">' +
                    '<div class="image-zone"><img id = "pro-img-2" src = "' +
                    picFile.result + '" style="width:100%;" class="client-product-images" data-filename="' +
                    e.target.name + '"/>' +
                    '</div > ' +
                    '</div > ';

                bannerImageBase64 = {
                    fileName: e.target.name,
                    base64String: picFile.result
                };
                output.append(html);


            }
            picReader.readAsDataURL(file);
        }
        else {
            console.log('Browser not support');
        }
    }
</script>



