//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using Model;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WebShopEntities : DbContext
    {
        public WebShopEntities()
            : base("name=WebShopEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<BaseFeatureType> BaseFeatureTypes { get; set; }
        public virtual DbSet<BaseFeatureTypeDetail> BaseFeatureTypeDetails { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<CategoryField> CategoryFields { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Dictionary> Dictionaries { get; set; }
        public virtual DbSet<Discount> Discounts { get; set; }
        public virtual DbSet<DiscountDetail> DiscountDetails { get; set; }
        public virtual DbSet<DiscountType> DiscountTypes { get; set; }
        public virtual DbSet<ExcelDictionary> ExcelDictionaries { get; set; }
        public virtual DbSet<FeatureType> FeatureTypes { get; set; }
        public virtual DbSet<FeatureTypeDetail> FeatureTypeDetails { get; set; }
        public virtual DbSet<Image> Images { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<InvoiceStateHistory> InvoiceStateHistories { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<LocalLink> LocalLinks { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<Occasion> Occasions { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Package> Packages { get; set; }
        public virtual DbSet<PackageDetail> PackageDetails { get; set; }
        public virtual DbSet<PackageOrder> PackageOrders { get; set; }
        public virtual DbSet<PackageOrderDetail> PackageOrderDetails { get; set; }
        public virtual DbSet<PageContent> PageContents { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductCategoryField> ProductCategoryFields { get; set; }
        public virtual DbSet<ProductDiscount> ProductDiscounts { get; set; }
        public virtual DbSet<ProductFeature> ProductFeatures { get; set; }
        public virtual DbSet<Province> Provinces { get; set; }
        public virtual DbSet<QuantityUnit> QuantityUnits { get; set; }
        public virtual DbSet<RecipientType> RecipientTypes { get; set; }
        public virtual DbSet<RefrenceWord> RefrenceWords { get; set; }
        public virtual DbSet<SiteInfo> SiteInfoes { get; set; }
        public virtual DbSet<Statistic> Statistics { get; set; }
        public virtual DbSet<SundryImage> SundryImages { get; set; }
        public virtual DbSet<ViewCategoryField> ViewCategoryFields { get; set; }
        public virtual DbSet<ViewFeatureType> ViewFeatureTypes { get; set; }
        public virtual DbSet<ViewFeatureTypeDetail> ViewFeatureTypeDetails { get; set; }
        public virtual DbSet<ViewMessage> ViewMessages { get; set; }
        public virtual DbSet<ViewOrder> ViewOrders { get; set; }
        public virtual DbSet<ViewPersonInRole> ViewPersonInRoles { get; set; }
        public virtual DbSet<ViewProduct> ViewProducts { get; set; }
        public virtual DbSet<ViewProductCategoryField> ViewProductCategoryFields { get; set; }
        public virtual DbSet<ViewProductFeature> ViewProductFeatures { get; set; }
        public virtual DbSet<ViewProductFeatureFullInfo> ViewProductFeatureFullInfoes { get; set; }
        public virtual DbSet<ViewShopProduct> ViewShopProducts { get; set; }
        public virtual DbSet<ViewUserRole> ViewUserRoles { get; set; }
        public virtual DbSet<FlashCard> FlashCards { get; set; }
    
        [DbFunction("WebShopEntities", "GetProductIconGroupByFilter")]
        public virtual IQueryable<GetProductIconGroupByFilter_Result> GetProductIconGroupByFilter(Nullable<int> firstIconPriority, string featureDetailCombinationList, string delimiter, string parentIdList, Nullable<decimal> minPrice, Nullable<decimal> maxPrice)
        {
            var firstIconPriorityParameter = firstIconPriority.HasValue ?
                new ObjectParameter("firstIconPriority", firstIconPriority) :
                new ObjectParameter("firstIconPriority", typeof(int));
    
            var featureDetailCombinationListParameter = featureDetailCombinationList != null ?
                new ObjectParameter("featureDetailCombinationList", featureDetailCombinationList) :
                new ObjectParameter("featureDetailCombinationList", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            var parentIdListParameter = parentIdList != null ?
                new ObjectParameter("parentIdList", parentIdList) :
                new ObjectParameter("parentIdList", typeof(string));
    
            var minPriceParameter = minPrice.HasValue ?
                new ObjectParameter("minPrice", minPrice) :
                new ObjectParameter("minPrice", typeof(decimal));
    
            var maxPriceParameter = maxPrice.HasValue ?
                new ObjectParameter("maxPrice", maxPrice) :
                new ObjectParameter("maxPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetProductIconGroupByFilter_Result>("[WebShopEntities].[GetProductIconGroupByFilter](@firstIconPriority, @featureDetailCombinationList, @delimiter, @parentIdList, @minPrice, @maxPrice)", firstIconPriorityParameter, featureDetailCombinationListParameter, delimiterParameter, parentIdListParameter, minPriceParameter, maxPriceParameter);
        }
    
        public virtual ObjectResult<SpGetAllProductFeatureFeatureTypeDetail_Result> SpGetAllProductFeatureFeatureTypeDetail(Nullable<System.Guid> productFeatureId)
        {
            var productFeatureIdParameter = productFeatureId.HasValue ?
                new ObjectParameter("ProductFeatureId", productFeatureId) :
                new ObjectParameter("ProductFeatureId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllProductFeatureFeatureTypeDetail_Result>("SpGetAllProductFeatureFeatureTypeDetail", productFeatureIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SpGetChildrenOfCategory(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpGetChildrenOfCategory", categoryIdParameter);
        }
    
        public virtual ObjectResult<SpGetOrderProductFeature_Result> SpGetOrderProductFeature(string featureDetailCombinationList, string delimiter, string parentIdList)
        {
            var featureDetailCombinationListParameter = featureDetailCombinationList != null ?
                new ObjectParameter("featureDetailCombinationList", featureDetailCombinationList) :
                new ObjectParameter("featureDetailCombinationList", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            var parentIdListParameter = parentIdList != null ?
                new ObjectParameter("parentIdList", parentIdList) :
                new ObjectParameter("parentIdList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetOrderProductFeature_Result>("SpGetOrderProductFeature", featureDetailCombinationListParameter, delimiterParameter, parentIdListParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SpGetParentsOfCategory(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpGetParentsOfCategory", categoryIdParameter);
        }
    
        public virtual ObjectResult<SpGetProductFeaturesByFilter_Result> SpGetProductFeaturesByFilter(ObjectParameter groupedIconList, Nullable<int> firstIconPriority, string featureDetailCombinationList, string delimiter, string parentIdList, Nullable<decimal> minPrice, Nullable<decimal> maxPrice)
        {
            var firstIconPriorityParameter = firstIconPriority.HasValue ?
                new ObjectParameter("firstIconPriority", firstIconPriority) :
                new ObjectParameter("firstIconPriority", typeof(int));
    
            var featureDetailCombinationListParameter = featureDetailCombinationList != null ?
                new ObjectParameter("featureDetailCombinationList", featureDetailCombinationList) :
                new ObjectParameter("featureDetailCombinationList", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            var parentIdListParameter = parentIdList != null ?
                new ObjectParameter("parentIdList", parentIdList) :
                new ObjectParameter("parentIdList", typeof(string));
    
            var minPriceParameter = minPrice.HasValue ?
                new ObjectParameter("minPrice", minPrice) :
                new ObjectParameter("minPrice", typeof(decimal));
    
            var maxPriceParameter = maxPrice.HasValue ?
                new ObjectParameter("maxPrice", maxPrice) :
                new ObjectParameter("maxPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductFeaturesByFilter_Result>("SpGetProductFeaturesByFilter", groupedIconList, firstIconPriorityParameter, featureDetailCombinationListParameter, delimiterParameter, parentIdListParameter, minPriceParameter, maxPriceParameter);
        }
    
        public virtual ObjectResult<SpGetProductFeaturesByProductFilter_Result> SpGetProductFeaturesByProductFilter(string featureDetailCombination, string delimiter, string parentId, Nullable<decimal> minPrice, Nullable<decimal> maxPrice)
        {
            var featureDetailCombinationParameter = featureDetailCombination != null ?
                new ObjectParameter("featureDetailCombination", featureDetailCombination) :
                new ObjectParameter("featureDetailCombination", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            var parentIdParameter = parentId != null ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(string));
    
            var minPriceParameter = minPrice.HasValue ?
                new ObjectParameter("minPrice", minPrice) :
                new ObjectParameter("minPrice", typeof(decimal));
    
            var maxPriceParameter = maxPrice.HasValue ?
                new ObjectParameter("maxPrice", maxPrice) :
                new ObjectParameter("maxPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductFeaturesByProductFilter_Result>("SpGetProductFeaturesByProductFilter", featureDetailCombinationParameter, delimiterParameter, parentIdParameter, minPriceParameter, maxPriceParameter);
        }
    
        [DbFunction("WebShopEntities", "SplitString")]
        public virtual IQueryable<string> SplitString(string input, string character)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var characterParameter = character != null ?
                new ObjectParameter("Character", character) :
                new ObjectParameter("Character", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[WebShopEntities].[SplitString](@Input, @Character)", inputParameter, characterParameter);
        }
    }
}
